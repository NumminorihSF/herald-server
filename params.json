{"name":"Herald-server","tagline":"Server for sending messages by publish-subscribe, and whispering.","body":"Use node.js or io.js socket server (tcp, unix) for transport messages (or encrypted messages) through applications.\r\n\r\nInstall with:\r\n\r\n    npm install herald-server\r\n\r\nDependencies:\r\n\r\n    crypt-maker\r\n\r\n[Documentation by jsDuck. Also in RUS](http://numminorihsf.github.io/herald). \r\n\r\n# Usage\r\n\r\nSimple example:\r\n\r\n```js\r\n\r\n    var HeraldServer = require('herald-server');\r\n    var hs = new HeraldServer({}, 'no');\r\n    hs.on('error', function(){\r\n        console.log('HS error:', error);\r\n    });\r\n    hs.on('listening', function(){\r\n        console.log('HS listening on', hs.address());\r\n    });\r\n    hs.listen(8765);\r\n    process.on('SIGINT', function(){\r\n        hs.close();\r\n    });\r\n    process.on('SIGTERM', function(){\r\n        hs.close();\r\n    });\r\n```\r\n\r\n# Changes\r\n\r\n - Add rpc support.\r\n - Ping removed (tcp ans unix socket know about connection close). Udp is not recommended.\r\n - Some procedures can be spawned on server easily.\r\n - Add JSDuck doc.\r\n\r\n# Methods\r\n\r\n## new HeraldSever(options[, algorithm[, key]])\r\n\r\n`options` is an Object. May be `{}`. Contains properties:\r\n* `.logger` - Logger object - to log inner events\r\n* `.whiteList` - Array of strings or regexps. Default `[]`\r\n* `.welcomeMessage` - String. Then connection opens - send this to socket. Default `'Welcome to Herald Server.'`\r\n* `.messageMaker` - Object. Some module, that make and parse messages. See below. Default `crypt-maker`\r\n\r\n`algorithm` - If need crypt messages - algorithm for crypt. By default doesn't encrypt.\r\n`key` Encryption key.\r\n\r\nIf use `crypt-maker` and if `algorithm && algorithm !== 'no'` and no key passed to constructor - throws error.\r\n\r\n\r\n## hs.listen() \r\n\r\nArguments passed to method are seems as net.Server.listen method of node.js standard api. Use like:\r\n\r\n* `hs.listen(port[, host][, backlog][, callback])`\r\n* `hs.listen(path[, callback])`\r\n* `hs.listen(handle[, callback])`\r\n* `hs.listen(options[, callback])`\r\n\r\nOptions are:\r\n* `options` {Object} - Required. Supports the following properties:\r\n  * `port` {Number} - Optional.\r\n  * `host` {String} - Optional.\r\n  * `backlog` {Number} - Optional.\r\n  * `path` {String} - Optional.\r\n  * `exclusive` {Boolean} - Optional.\r\n* `callback` {Function} - Optional.\r\n\r\nFor all info about this see: https://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback\r\n\r\n## hs.close([callback])\r\n\r\nStops the server from accepting new connections and keeps existing\r\nconnections.\r\n\r\n## hs.unref() Experimental\r\n\r\nCalling `unref` on a server will allow the program to exit if this is the only\r\nactive server in the event system. If the server is already `unref`d calling\r\n`unref` again will have no effect.\r\n\r\n## hs.ref() Experimental\r\n\r\nOpposite of `unref`, calling `ref` on a previously `unref`d server will *not*\r\nlet the program exit if it's the only server left (the default behavior). If\r\nthe server is `ref`d calling `ref` again will have no effect.\r\n\r\n# Events\r\n\r\n## 'listening'\r\n\r\nEmitted when the server has been bound after calling `hs.listen`.\r\n\r\n## 'connection'\r\n\r\n* {Socket Object} The connection object\r\n\r\nEmitted when a new connection is made. `socket` is an instance of\r\n`net.Socket`. Also where if `socket.header` with header of auth message.\r\n\r\n## 'close'\r\n\r\nEmitted when the server closes. Note that if connections exist, this\r\nevent is not emitted until all connections are ended.\r\n\r\n## 'error'\r\n\r\n* {Error Object}\r\n\r\nEmitted when an error occurs.  The `'close'` event will be called directly\r\nfollowing this event.  See example in discussion of `hs.listen`.\r\n\r\n\r\n# Message format\r\n\r\nEvery message should has `header` and `body`.\r\nIf there is no `header` or `body` - message will not sent.\r\n\r\n\r\n## Authorize\r\n\r\n**Be careful** by default without any encrypt algorithm any can connect to your server if he know format.\r\n\r\nExample of message to authorize (without encrypt):\r\n\r\n```\r\n    '{\"rpc\":\"herald-server\",\"action\":\"authorize\",\"actionId\":7,\"name\":\"156512\",\r\n    \"uid\":\"156512_86835\",\"messId\":76688,\"retry\":5,\"timeout\":15000}\\r\\n\r\n     {\"args\":{\"wellKnown\":\"pHrAsE\",\"name\":\"156512\",\"uid\":\"156512_86835\",\"rand\":459}}\\r\\n\\r\\n' \r\n```\r\n\r\nIf there is some connection with same uid - will not authorize new connection and close it.\r\n\r\n\r\n\r\n## Message header format\r\n\r\nFields:\r\n* `messId` Number - id of message.\r\n* `name` String - connection name. Used for whispering and rpc.\r\n* `uid` String - connection uid. Used for whispering and rpc. Unique for every connect.\r\n* `retry` Number [optional] - Count of retries of sending this message. If no field - will not retry.\r\n*Now it is ignored by server. Will work soon.*\r\n* `timeout` Number [optional] - Duration in ms to wait answer from client. If no field - will not retry.\r\n*Now it is ignored by server. Will work soon.*\r\n\r\nEvent:\r\n* `whisp` String [optional] - name of connection to send event message.\r\n* `whispUid` String [optional] - uid of connection to send event message.\r\n* `event` String - event name. If no `whisp` or `whispUid` sends to all subscribers.\r\n\r\nRPC:\r\n* `actionId` Number - id of action.\r\n* `action` String - name of action.\r\n* `rpc` String [optional] - name of connection to send rpc message.\r\n* `rpcUid` String [optional] - uid of connection to send rpc message.\r\n* `rpcRegExp` String|RegExp [optional] - regexp to find connections by name to send rpc message.\r\n\r\n\r\n## Message body format\r\n\r\nBody can by plain string, json, number or something else, except functions.\r\n\r\n## Message examples\r\n\r\nExamples shown without any encryption.\r\n\r\nRPC by client name message:\r\n```js\r\n     '{\"rpc\":\"applicationToCall\",\"action\":\"actionToCall\",\"actionId\":numberActionIdFromSender,\r\n     \"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\r\n         {\"args\":{argsObject}}\\r\\n\\r\\n' \r\n```\r\n\r\nRPC by client UID message:\r\n```js\r\n     '{\"rpcUid\":\"applicationToCall\",\"action\":\"actionToCall\",\"actionId\":numberActionIdFromSender,\r\n     \"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\r\n         {\"args\":{argsObject}}\\r\\n\\r\\n' \r\n```\r\n\r\nWhispering message:\r\n```js\r\n    '{\"whisp\":\"nameOfAppToWhisp\",\"event\":\"someSecretEvent\",\"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\r\n    \"messId\":numberMessageId}\\r\\n\"eventBody\"\\r\\n\\r\\n'\r\n```\r\n\r\nEvent message:\r\n```js\r\n    '{\"event\":\"someEvent\",\"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\"eventBody\"\\r\\n\\r\\n'\r\n```\r\n\r\n# LICENSE - \"MIT License\"\r\n\r\nCopyright (c) 2015 Konstantine Petryaev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}